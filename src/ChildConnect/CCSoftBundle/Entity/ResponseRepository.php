<?php

namespace ChildConnect\CCSoftBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
/**
 * ResponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResponseRepository extends EntityRepository
{
	public function getResponseByQuestionId($question,$e_actif=1,$association,$dateStart = NULL, $dateEnd = NULL) {
		
		
		$ids_eq = $this->_getIdsLastEnfantQuiz($e_actif);
		$queryBuilder = $this->_em->createQueryBuilder();
		$queryBuilder->select(array('r','rp','eq','e'))
			  ->from($this->_entityName, 'r','r.id')
			  ->innerJoin('r.question','q')
			  ->innerJoin('r.responseChoice','rp')
			  ->innerJoin('r.enfantQuiz','eq')
			  ->innerJoin('eq.enfant','e')
			   ->where('q = :question')
			 
			  ->setParameter('question',$question)
			   ->addOrderBy('r.dateResponse','ASC');
		if($ids_eq)	   
			   $queryBuilder ->andWhere($queryBuilder->expr()->in('r.enfantQuiz',$ids_eq));
		if($dateStart && $dateEnd)
			$queryBuilder->andWhere('r.dateResponse >= :dateStart')
			->setParameter('dateStart', $dateStart.'%')
			->andWhere('r.dateResponse <= :dateEnd')
			->setParameter('dateEnd', $dateEnd.'%');
		if($association)
			 $queryBuilder->leftJoin('e.associations','a')
				->andWhere('a = :association')
			  	->setParameter('association',$association);
			
		
		$result = $queryBuilder ->getQuery()->getResult();
		
		return $result;
	}
	private function _getIdsLastEnfantQuiz($e_actif = 1) {
		$rsm = new ResultSetMappingBuilder($this->_em);
		$rsm->addRootEntityFromClassMetadata('ChildConnect\CCSoftBundle\Entity\EnfantQuiz', 'eq');
		$rsm->addJoinedEntityFromClassMetadata('ChildConnect\CCSoftBundle\Entity\Enfant', 'e', 'eq', 'enfant_id', array('id' => 'enfant_id'));
		
		$sql = 'SELECT eq.id, eq.date_responded FROM (SELECT eqs.id,eqs.date_responded , eqs.enfant_id FROM enfant_quiz eqs WHERE eqs.date_responded IS NOT NULL ORDER BY eqs.date_responded DESC )  eq INNER JOIN enfant e ON(e.id = eq.enfant_id) WHERE e.actif = '.$e_actif.' GROUP BY eq.enfant_id ';
		
		$query = $this->_em->createNativeQuery($sql, $rsm);
		$query_last_ids_enfantquiz = $query->getScalarResult();
		$ids_eq = array();
		foreach($query_last_ids_enfantquiz as $eq)
			$ids_eq[] = $eq['eq_id'];
                if (empty($ids_eq)) {
                    $ids_eq[] = 0;
                }
		return $ids_eq;
	}
	public function findLatestResponseQuizs($enfantQuiz) {
		$queryBuilder = $this->_em->createQueryBuilder()
			->select(array('r','rp','q'))
			->from($this->_entityName, 'r')
			->innerJoin('r.responseChoice','rp')
			->leftJoin('r.question','q')
			->where('r.enfantQuiz = :enfantQuiz')
			->setParameter('enfantQuiz',$enfantQuiz)
			->andWhere('r.commentaire is null')
			->andWhere('r.responseChoice is NOT NULL')
			->getQuery()->getResult();
			;
		return $queryBuilder;
	}
	public function getResponsesByResponseProposal($question,$reponseProposal,$association) {
		$rsm = new ResultSetMappingBuilder($this->_em);
		$rsm->addRootEntityFromClassMetadata('ChildConnect\CCSoftBundle\Entity\EnfantQuiz', 'eq');
		$rsm->addJoinedEntityFromClassMetadata('ChildConnect\CCSoftBundle\Entity\Enfant', 'e', 'eq', 'enfant_id', array('id' => 'enfant_id'));
		
		$sql = 'SELECT eq.id, eq.date_responded FROM (SELECT eqs.id,eqs.date_responded , eqs.enfant_id FROM enfant_quiz eqs WHERE eqs.date_responded IS NOT NULL ORDER BY eqs.date_responded DESC )  eq INNER JOIN enfant e ON(e.id = eq.enfant_id) WHERE e.actif = 1 GROUP BY eq.enfant_id ';
		
		$query = $this->_em->createNativeQuery($sql, $rsm);
		$query_last_ids_enfantquiz = $query->getScalarResult();
		$ids_eq = array();
		foreach($query_last_ids_enfantquiz as $eq)
			$ids_eq[] = $eq['eq_id'];
		
		$queryBuilder = $this->_em->createQueryBuilder();
		
		$queryBuilder->select(array('r'))
			->from($this->_entityName, 'r')
			 ->innerJoin('r.enfantQuiz','eq')
			 ->innerJoin('r.question','q')
			->where('r.responseChoice = :reponseProposal')
			->setParameter('reponseProposal',$reponseProposal)
			->andWhere('q = :question')
			->setParameter('question',$question)
			->andWhere('r.commentaire is null')
			->andWhere('r.responseChoice is NOT NULL')
			->andWhere($queryBuilder->expr()->in('r.enfantQuiz',$ids_eq));
			
		if($association)
			 $queryBuilder->innerJoin('eq.enfant','e')
			 	->leftJoin('e.associations','a')
				->andWhere('a = :association')
			  	->setParameter('association',$association);
		
		$result = $queryBuilder->getQuery()->getResult();
			
			
		return $result;
	}
}
